
在JavaScript中，十进制0.1转换成二进制，是一个乘2取整过程：

0.1 * 2 = 0.2 # 0
0.2 * 2 = 0.4 # 0
0.4 * 2 = 0.8 # 0
0.8 * 2 = 1.6 # 1
0.6 * 2 = 1.2 # 1
0.2 * 2 = 0.4 # 0

可得到0.1的二进制格式是：0.0001100011....。这是一个二进制无限循环小数，存储时，计算机会在在某个精度点直接舍弃。故0.1在计算机内部根本就不是精确的0.1，而是一个有舍入误差的0.1，以至于计算还没开始，一个很小的舍入错误就已经产生了。这也就是 0.1 + 0.2 不等于0.3 的原因。另外，不是所有浮点数都有舍入误差。二进制能精确地表示位数有限且分母是2的倍数的小数，比如0.5，0.5在计算机内部就没有舍入误差。所以0.5 + 0.5 === 1。
解决方案：
最好的方法就是我们想办法规避掉这类小数计算时的精度问题就好了，我们可以将浮点数转化成整数计算。因为整数都是可以精确表示的。我们可以把计算数字提升10的N次方倍再除以10的N次方，例如：(0.1*1000+0.2*1000)/1000==0.3